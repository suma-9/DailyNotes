DAT-01:

JENKINS:

its  a cicd too1.
ci - continous integration 	: continous build + continous test
cd - continous delivery 	: manual deployment to production
cd - continous deployment 	: automation deployment to production

ENV:
DEV	- Developers
TEST	- Testers
UAT	- Client
PROD	- User (live)

PIPELINE: 
series of events interlinked with each other.
step by step execution of a process.

JENKINS:
Jenkins is a free and opensource tool.
jenkins is a platform independent.
jenkins -- > java 11/17
written by Kohsuke Kawaguchi on java platform.
it has the community supports.
jenkins was developed as a part of sunmicro systemts
it was paid version while the name as hudson.
but later oracle brought this and made free.
it has the plugins support.
jenkins works on port 8080.

dev -- > gitthub --- > ci (jenkins) -- > build test & deploy.

SETUP:

#STEP-1: INSTALLING GIT JAVA-1.8.0 MAVEN 
yum install git java-1.8.0-openjdk maven -y

#STEP-2: GETTING THE REPO (jenkins.io --> download -- > redhat)
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

#STEP-3: DOWNLOAD JAVA11 AND JENKINS
amazon-linux-extras install java-openjdk11 -y
yum install jenkins -y
update-alternatives --config java

#STEP-4: RESTARTING JENKINS (when we download service it will on stopped state)
systemctl start jenkins.service
systemctl status jenkins.service

pulbic-ip:8080


CI JOB:
new time -- > name -- < freestyle -- > Source Code Management: git -- > repo: https://github.com/devopsbyraham/jenkins-java-project.git -- > save -- > build now 

configure -- > Build Steps  -- > invoke top level maven target -- > goal: test -- > save

==================================
======================================

DAY-02:

VARIABLES:
It can hold the data 
it can be vary as the per the time.

a=2

USERDEFINED:
1. LOCAL VARS: it will work inside the job

b=7
name=raham
loc=hyderabad
echo "the name is $name, $name is from $loc"


2. GLOBAL VARS: outside of the job

Dashboarb -- > Manage Jenkins -- > System -- >  Global properties -- > Environment variables
Add -- > name: raham -- > add -- > loc: mumbai

echo "the name is $name, $name is from $loc"

PORT NUMBER CHANGING:
cd /usr/lib/systemd/system
vim jenkins.service -- > 67 -- > 8080 = 8084 -- ? :wq
systemctl daemon-reload
systemctl restart jenkins

PASSWORDLESS LOGIN:
cd /var/lib/jenkins/
vim config.xml -- > line 7 -- > true=false -- > :wq
systemctl restart jenkins

*******************************************************
day-03:

vim jenkins.sh

#STEP-1: INSTALLING GIT JAVA-1.8.0 MAVEN 
yum install git java-1.8.0-openjdk maven -y

#STEP-2: GETTING THE REPO (jenkins.io --> download -- > redhat)
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

#STEP-3: DOWNLOAD JAVA11 AND JENKINS
amazon-linux-extras install java-openjdk11 -y
yum install jenkins -y
update-alternatives --config java

#STEP-4: RESTARTING JENKINS (when we download service it will on stopped state)
systemctl start jenkins.service
systemctl status jenkins.service

-------------------------------------
sh jenkins.sh : to execute

PARAMETERS:
Giving/passing input for the job to run.


configure -- > This project is parameterized -- > add parameters -- > choice 

1. choice : to pass input from given choices
2. string : to pass input dyamically
3. Muti-line string : to pass the input on multiple lines
4. File : to build the local files
5. Boolean: it give true or flase


JENKINS ENVIRONMENT VARIABLES:
these values is given by jenkins based on builds.
it cannot be defined by user.


echo "
The build number is $BUILD_NUMBER, 
The job name is $JOB_NAME
The build url is $BUILD_URl
the commit id is $GIT_COMMIT
the branch name is $GIT_BRANCH
The server is $JENKINS_URL
"

LINKED JOBS: if one job is depended on another job.

create ci job git: repo -- > invoke top level maven targets -- > clean package -- > post build action -- >  Build other projects: swiggypipeline

1. up stream
2. down stream
